function [rules, predicates] = llm_rule_generator(dataset, abnormalIdx, normalIdx, field_names, model_name)
    openai_config = struct(...
        'api_key', getenv('OPENAI_API_KEY'),...
        'model', 'gpt-4-turbo-preview',...
        'temperature', 0.7...
    );
    
    metrics = extract_performance_metrics(dataset, field_names);
    patterns = analyze_anomaly_patterns(dataset.data, abnormalIdx, normalIdx);
    prompt = generate_diagnostic_prompt(metrics, patterns, model_name);
    llm_response = call_llm_api(prompt, openai_config);
    [rules, predicates] = parse_llm_rules(llm_response, field_names);
end

function metrics = extract_performance_metrics(dataset, field_names)
    metrics = struct();
    for i = 1:length(field_names)
        metrics.(field_names{i}) = struct(...
            'mean', mean(dataset.data(:,i)),...
            'std', std(dataset.data(:,i)),...
            'min', min(dataset.data(:,i)),...
            'max', max(dataset.data(:,i))...
        );
    end
end

function patterns = analyze_anomaly_patterns(data, abnormalIdx, normalIdx)
    patterns = struct(...
        'abnormal_stats', analyze_region(data(abnormalIdx,:)),...
        'normal_stats', analyze_region(data(normalIdx,:)),...
        'correlations', calculate_correlations(data, abnormalIdx, normalIdx)...
    );
end 